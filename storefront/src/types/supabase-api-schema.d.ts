/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/branches/{branch_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get database branch config
         * @description Fetches configurations of the specified database branch
         */
        get: operations["v1-get-a-branch-config"];
        put?: never;
        post?: never;
        /**
         * Delete a database branch
         * @description Deletes the specified database branch
         */
        delete: operations["v1-delete-a-branch"];
        options?: never;
        head?: never;
        /**
         * Update database branch config
         * @description Updates the configuration of the specified database branch
         */
        patch: operations["v1-update-a-branch-config"];
        trace?: never;
    };
    "/v1/branches/{branch_id}/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Resets a database branch
         * @description Resets the specified database branch
         */
        post: operations["v1-reset-a-branch"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all projects
         * @description Returns a list of all projects you've previously created.
         */
        get: operations["v1-list-all-projects"];
        put?: never;
        /** Create a project */
        post: operations["v1-create-a-project"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all organizations
         * @description Returns a list of organizations that you currently belong to.
         */
        get: operations["v1-list-all-organizations"];
        put?: never;
        /** Create an organization */
        post: operations["v1-create-an-organization"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/oauth/authorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** [Beta] Authorize user through oauth */
        get: operations["v1-authorize-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/oauth/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** [Beta] Exchange auth code for user's access and refresh token */
        post: operations["v1-exchange-oauth-token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/snippets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Lists SQL snippets for the logged in user */
        get: operations["v1-list-all-snippets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/snippets/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets a specific SQL snippet */
        get: operations["v1-get-a-snippet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/api-keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get project api keys */
        get: operations["v1-get-project-api-keys"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/branches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all database branches
         * @description Returns all database branches of the specified project.
         */
        get: operations["v1-list-all-branches"];
        put?: never;
        /**
         * Create a database branch
         * @description Creates a database branch from the specified project.
         */
        post: operations["v1-create-a-branch"];
        /**
         * Disables preview branching
         * @description Disables preview branching for the specified project
         */
        delete: operations["v1-disable-preview-branching"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/custom-hostname": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** [Beta] Gets project's custom hostname config */
        get: operations["v1-get-hostname-config"];
        put?: never;
        post?: never;
        /** [Beta] Deletes a project's custom hostname configuration */
        delete: operations["v1-Delete hostname config"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/custom-hostname/initialize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** [Beta] Updates project's custom hostname configuration */
        post: operations["v1-update-hostname-config"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/custom-hostname/reverify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** [Beta] Attempts to verify the DNS configuration for project's custom hostname configuration */
        post: operations["v1-verify-dns-config"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/custom-hostname/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** [Beta] Activates a custom hostname for a project. */
        post: operations["v1-activate-custom-hostname"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/network-bans/retrieve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** [Beta] Gets project's network bans */
        post: operations["v1-list-all-network-bans"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/network-bans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** [Beta] Remove network bans. */
        delete: operations["v1-delete-network-bans"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/network-restrictions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** [Beta] Gets project's network restrictions */
        get: operations["v1-get-network-restrictions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/network-restrictions/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** [Beta] Updates project's network restrictions */
        post: operations["v1-update-network-restrictions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/pgsodium": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** [Beta] Gets project's pgsodium config */
        get: operations["v1-get-pgsodium-config"];
        /** [Beta] Updates project's pgsodium config. Updating the root_key can cause all data encrypted with the older key to become inaccessible. */
        put: operations["v1-update-pgsodium-config"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/postgrest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets project's postgrest config */
        get: operations["v1-get-postgrest-service-config"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Updates project's postgrest config */
        patch: operations["v1-update-postgrest-service-config"];
        trace?: never;
    };
    "/v1/projects/{ref}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Deletes the given project */
        delete: operations["v1-Delete a project"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/secrets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all secrets
         * @description Returns all secrets you've previously added to the specified project.
         */
        get: operations["v1-list-all-secrets"];
        put?: never;
        /**
         * Bulk create secrets
         * @description Creates multiple secrets and adds them to the specified project.
         */
        post: operations["v1-bulk-create-secrets"];
        /**
         * Bulk delete secrets
         * @description Deletes all secrets with the given names from the specified project
         */
        delete: operations["v1-bulk-delete-secrets"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/ssl-enforcement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** [Beta] Get project's SSL enforcement configuration. */
        get: operations["v1-get-ssl-enforcement-config"];
        /** [Beta] Update project's SSL enforcement configuration. */
        put: operations["v1-update-ssl-enforcement-config"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/types/typescript": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Generate TypeScript types
         * @description Returns the TypeScript types of your schema for use with supabase-js.
         */
        get: operations["v1-generate-typescript-types"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/vanity-subdomain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** [Beta] Gets current vanity subdomain config */
        get: operations["v1-get-vanity-subdomain-config"];
        put?: never;
        post?: never;
        /** [Beta] Deletes a project's vanity subdomain configuration */
        delete: operations["v1-deactivate-vanity-subdomain-config"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/vanity-subdomain/check-availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** [Beta] Checks vanity subdomain availability */
        post: operations["v1-check-vanity-subdomain-availability"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/vanity-subdomain/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** [Beta] Activates a vanity subdomain for a project. */
        post: operations["v1-activate-vanity-subdomain-config"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/upgrade": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** [Beta] Upgrades the project's Postgres version */
        post: operations["v1-upgrade-postgres-version"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/upgrade/eligibility": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** [Beta] Returns the project's eligibility for upgrades */
        get: operations["v1-get-postgrest-upgrade-eligibility"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/upgrade/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** [Beta] Gets the latest status of the project's upgrade */
        get: operations["v1-get-postgrest-upgrade-status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/readonly": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns project's readonly mode status */
        get: operations["v1-get-readonly-mode-status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/readonly/temporary-disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Disables project's readonly mode for the next 15 minutes */
        post: operations["v1-disable-readonly-mode-temporarily"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/read-replicas/setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** [Beta] Set up a read replica */
        post: operations["v1-setup-a-read-replica"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/read-replicas/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** [Beta] Remove a read replica */
        post: operations["v1-remove-a-read-replica"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets project's service health status */
        get: operations["v1-get-services-health"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/config/database/postgres": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets project's Postgres config */
        get: operations["v1-get-postgres-config"];
        /** Updates project's Postgres config */
        put: operations["v1-update-postgres-config"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/config/database/pgbouncer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get project's pgbouncer config */
        get: operations["v1-get-project-pgbouncer-config"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/config/database/pooler": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets project's supavisor config */
        get: operations["v1-get-supavisor-config"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Updates project's supavisor config */
        patch: operations["v1-update-supavisor-config"];
        trace?: never;
    };
    "/v1/projects/{ref}/config/auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets project's auth config */
        get: operations["v1-get-auth-service-config"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Updates a project's auth config */
        patch: operations["v1-update-auth-service-config"];
        trace?: never;
    };
    "/v1/projects/{ref}/database/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** [Beta] Run sql query */
        post: operations["v1-run-a-query"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/database/webhooks/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** [Beta] Enables Database Webhooks on the project */
        post: operations["v1-enable-database-webhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/functions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all functions
         * @description Returns all functions you've previously added to the specified project.
         */
        get: operations["v1-list-all-functions"];
        put?: never;
        /**
         * Create a function
         * @description Creates a function and adds it to the specified project.
         */
        post: operations["createFunction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/functions/{function_slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a function
         * @description Retrieves a function with the specified slug and project.
         */
        get: operations["v1-get-a-function"];
        put?: never;
        post?: never;
        /**
         * Delete a function
         * @description Deletes a function with the specified slug from the specified project.
         */
        delete: operations["v1-delete-a-function"];
        options?: never;
        head?: never;
        /**
         * Update a function
         * @description Updates a function with the specified slug and project.
         */
        patch: operations["v1-update-a-function"];
        trace?: never;
    };
    "/v1/projects/{ref}/functions/{function_slug}/body": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a function body
         * @description Retrieves a function body for the specified slug and project.
         */
        get: operations["v1-get-a-function-body"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/storage/buckets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Lists all buckets */
        get: operations["v1-list-all-buckets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/config/auth/sso/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Lists all SSO providers */
        get: operations["v1-list-all-sso-provider"];
        put?: never;
        /** Creates a new SSO provider */
        post: operations["v1-create-a-sso-provider"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/config/auth/sso/providers/{provider_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets a SSO provider by its UUID */
        get: operations["v1-get-a-sso-provider"];
        /** Updates a SSO provider by its UUID */
        put: operations["v1-update-a-sso-provider"];
        post?: never;
        /** Removes a SSO provider by its UUID */
        delete: operations["v1-delete-a-sso-provider"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/database/backups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Lists all backups */
        get: operations["v1-list-all-backups"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{ref}/database/backups/restore-pitr": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Restores a PITR backup for a database */
        post: operations["v1-restore-pitr-backup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizations/{slug}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List members of an organization */
        get: operations["v1-list-organization-members"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizations/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets information about the organization */
        get: operations["v1-get-an-organization"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BranchDetailResponse: {
            db_port: number;
            ref: string;
            postgres_version: string;
            /** @enum {string} */
            status: "ACTIVE_HEALTHY" | "ACTIVE_UNHEALTHY" | "COMING_UP" | "GOING_DOWN" | "INACTIVE" | "INIT_FAILED" | "REMOVED" | "RESTARTING" | "UNKNOWN" | "UPGRADING" | "PAUSING" | "RESTORING" | "RESTORE_FAILED" | "PAUSE_FAILED";
            db_host: string;
            db_user?: string;
            db_pass?: string;
            jwt_secret?: string;
        };
        UpdateBranchBody: {
            branch_name?: string;
            git_branch?: string;
            reset_on_push?: boolean;
            persistent?: boolean;
        };
        BranchResponse: {
            id: string;
            name: string;
            project_ref: string;
            parent_project_ref: string;
            is_default: boolean;
            git_branch?: string;
            pr_number?: number;
            latest_check_run_id?: number;
            reset_on_push: boolean;
            persistent: boolean;
            /** @enum {string} */
            status: "CREATING_PROJECT" | "RUNNING_MIGRATIONS" | "MIGRATIONS_PASSED" | "MIGRATIONS_FAILED" | "FUNCTIONS_DEPLOYED" | "FUNCTIONS_FAILED";
            created_at: string;
            updated_at: string;
        };
        BranchDeleteResponse: {
            message: string;
        };
        BranchResetResponse: {
            message: string;
        };
        V1DatabaseResponse: {
            /** @description Database host */
            host: string;
            /** @description Database version */
            version: string;
        };
        V1ProjectResponse: {
            /** @description Id of your project */
            id: string;
            /** @description Slug of your organization */
            organization_id: string;
            /** @description Name of your project */
            name: string;
            /**
             * @description Region of your project
             * @example us-east-1
             */
            region: string;
            /**
             * @description Creation timestamp
             * @example 2023-03-29T16:32:59Z
             */
            created_at: string;
            database?: components["schemas"]["V1DatabaseResponse"];
            /** @enum {string} */
            status: "ACTIVE_HEALTHY" | "ACTIVE_UNHEALTHY" | "COMING_UP" | "GOING_DOWN" | "INACTIVE" | "INIT_FAILED" | "REMOVED" | "RESTARTING" | "UNKNOWN" | "UPGRADING" | "PAUSING" | "RESTORING" | "RESTORE_FAILED" | "PAUSE_FAILED";
        };
        /** @enum {string} */
        DesiredInstanceSize: "micro" | "small" | "medium" | "large" | "xlarge" | "2xlarge" | "4xlarge" | "8xlarge" | "12xlarge" | "16xlarge";
        V1CreateProjectBody: {
            /** @description Database password */
            db_pass: string;
            /** @description Name of your project, should not contain dots */
            name: string;
            /** @description Slug of your organization */
            organization_id: string;
            /**
             * @deprecated
             * @description Subscription plan is now set on organization level and is ignored in this request
             * @example free
             * @enum {string}
             */
            plan?: "free" | "pro";
            /**
             * @description Region you want your server to reside in
             * @example us-east-1
             * @enum {string}
             */
            region: "us-east-1" | "us-west-1" | "us-west-2" | "ap-east-1" | "ap-southeast-1" | "ap-northeast-1" | "ap-northeast-2" | "ap-southeast-2" | "eu-west-1" | "eu-west-2" | "eu-west-3" | "eu-central-1" | "ca-central-1" | "ap-south-1" | "sa-east-1";
            /**
             * @deprecated
             * @description This field is deprecated and is ignored in this request
             */
            kps_enabled?: boolean;
            desired_instance_size?: components["schemas"]["DesiredInstanceSize"];
            /**
             * @description Template URL used to create the project from the CLI.
             * @example https://github.com/supabase/supabase/tree/master/examples/slack-clone/nextjs-slack-clone
             */
            template_url?: string;
        };
        OrganizationResponseV1: {
            id: string;
            name: string;
        };
        CreateOrganizationBodyV1: {
            name: string;
        };
        OAuthTokenBody: {
            /** @enum {string} */
            grant_type: "authorization_code" | "refresh_token";
            client_id: string;
            client_secret: string;
            code?: string;
            code_verifier?: string;
            redirect_uri?: string;
            refresh_token?: string;
        };
        OAuthTokenResponse: {
            /** @enum {string} */
            token_type: "Bearer";
            access_token: string;
            refresh_token: string;
            expires_in: number;
        };
        SnippetProject: {
            id: number;
            name: string;
        };
        SnippetUser: {
            id: number;
            username: string;
        };
        SnippetMeta: {
            id: string;
            inserted_at: string;
            updated_at: string;
            /** @enum {string} */
            type: "sql";
            /** @enum {string} */
            visibility: "user" | "project" | "org" | "public";
            name: string;
            description?: string;
            project: components["schemas"]["SnippetProject"];
            owner: components["schemas"]["SnippetUser"];
            updated_by: components["schemas"]["SnippetUser"];
        };
        SnippetList: {
            data: components["schemas"]["SnippetMeta"][];
        };
        SnippetContent: {
            favorite: boolean;
            schema_version: string;
            sql: string;
        };
        SnippetResponse: {
            id: string;
            inserted_at: string;
            updated_at: string;
            /** @enum {string} */
            type: "sql";
            /** @enum {string} */
            visibility: "user" | "project" | "org" | "public";
            name: string;
            description?: string;
            project: components["schemas"]["SnippetProject"];
            owner: components["schemas"]["SnippetUser"];
            updated_by: components["schemas"]["SnippetUser"];
            content: components["schemas"]["SnippetContent"];
        };
        ApiKeyResponse: {
            name: string;
            api_key: string;
        };
        CreateBranchBody: {
            branch_name: string;
            git_branch?: string;
            region?: string;
        };
        UpdateCustomHostnameResponse: {
            /** @enum {string} */
            status: "1_not_started" | "2_initiated" | "3_challenge_verified" | "4_origin_setup_completed" | "5_services_reconfigured";
            custom_hostname: string;
            data: Record<string, never>;
        };
        UpdateCustomHostnameBody: {
            custom_hostname: string;
        };
        NetworkBanResponse: {
            banned_ipv4_addresses: string[];
        };
        RemoveNetworkBanRequest: {
            ipv4_addresses: string[];
        };
        NetworkRestrictionsRequest: {
            dbAllowedCidrs?: string[];
            dbAllowedCidrsV6?: string[];
        };
        NetworkRestrictionsResponse: {
            /** @enum {string} */
            entitlement: "disallowed" | "allowed";
            config: components["schemas"]["NetworkRestrictionsRequest"];
            old_config?: components["schemas"]["NetworkRestrictionsRequest"];
            /** @enum {string} */
            status: "stored" | "applied";
        };
        PgsodiumConfigResponse: {
            root_key: string;
        };
        UpdatePgsodiumConfigBody: {
            root_key: string;
        };
        PostgrestConfigWithJWTSecretResponse: {
            max_rows: number;
            /** @description If `null`, the value is automatically configured based on compute size. */
            db_pool: number | null;
            db_schema: string;
            db_extra_search_path: string;
            jwt_secret?: string;
        };
        UpdatePostgrestConfigBody: {
            max_rows?: number;
            db_pool?: number;
            db_extra_search_path?: string;
            db_schema?: string;
        };
        V1PostgrestConfigResponse: {
            max_rows: number;
            /** @description If `null`, the value is automatically configured based on compute size. */
            db_pool: number | null;
            db_schema: string;
            db_extra_search_path: string;
        };
        V1ProjectRefResponse: {
            id: number;
            ref: string;
            name: string;
        };
        SecretResponse: {
            name: string;
            value: string;
        };
        CreateSecretBody: {
            /**
             * @description Secret name must not start with the SUPABASE_ prefix.
             * @example string
             */
            name: string;
            value: string;
        };
        SslEnforcements: {
            database: boolean;
        };
        SslEnforcementResponse: {
            currentConfig: components["schemas"]["SslEnforcements"];
            appliedSuccessfully: boolean;
        };
        SslEnforcementRequest: {
            requestedConfig: components["schemas"]["SslEnforcements"];
        };
        TypescriptResponse: {
            types: string;
        };
        VanitySubdomainConfigResponse: {
            /** @enum {string} */
            status: "not-used" | "custom-domain-used" | "active";
            custom_domain?: string;
        };
        VanitySubdomainBody: {
            vanity_subdomain: string;
        };
        SubdomainAvailabilityResponse: {
            available: boolean;
        };
        ActivateVanitySubdomainResponse: {
            custom_domain: string;
        };
        UpgradeDatabaseBody: {
            target_version: number;
        };
        ProjectUpgradeInitiateResponse: {
            tracking_id: string;
        };
        ProjectVersion: {
            postgres_version: number;
            app_version: string;
        };
        ProjectUpgradeEligibilityResponse: {
            eligible: boolean;
            current_app_version: string;
            latest_app_version: string;
            target_upgrade_versions: components["schemas"]["ProjectVersion"][];
            potential_breaking_changes: string[];
            duration_estimate_hours: number;
            legacy_auth_custom_roles: string[];
            extension_dependent_objects: string[];
        };
        DatabaseUpgradeStatus: {
            initiated_at: string;
            target_version: number;
            /** @enum {string} */
            error?: "1_upgraded_instance_launch_failed" | "2_volume_detachchment_from_upgraded_instance_failed" | "3_volume_attachment_to_original_instance_failed" | "4_data_upgrade_initiation_failed" | "5_data_upgrade_completion_failed" | "6_volume_detachchment_from_original_instance_failed" | "7_volume_attachment_to_upgraded_instance_failed" | "8_upgrade_completion_failed";
            /** @enum {string} */
            progress?: "0_requested" | "1_started" | "2_launched_upgraded_instance" | "3_detached_volume_from_upgraded_instance" | "4_attached_volume_to_original_instance" | "5_initiated_data_upgrade" | "6_completed_data_upgrade" | "7_detached_volume_from_original_instance" | "8_attached_volume_to_upgraded_instance" | "9_completed_upgrade";
            /** @enum {number} */
            status: 0 | 1 | 2;
        };
        DatabaseUpgradeStatusResponse: {
            databaseUpgradeStatus: components["schemas"]["DatabaseUpgradeStatus"] | null;
        };
        ReadOnlyStatusResponse: {
            enabled: boolean;
            override_enabled: boolean;
            override_active_until: string;
        };
        SetUpReadReplicaBody: {
            /**
             * @description Region you want your read replica to reside in
             * @example us-east-1
             * @enum {string}
             */
            read_replica_region: "us-east-1" | "us-west-1" | "us-west-2" | "ap-east-1" | "ap-southeast-1" | "ap-northeast-1" | "ap-northeast-2" | "ap-southeast-2" | "eu-west-1" | "eu-west-2" | "eu-west-3" | "eu-central-1" | "ca-central-1" | "ap-south-1" | "sa-east-1";
        };
        RemoveReadReplicaBody: {
            database_identifier: string;
        };
        AuthHealthResponse: {
            name: string;
            version: string;
            description: string;
        };
        RealtimeHealthResponse: {
            healthy: boolean;
            db_connected: boolean;
            connected_cluster: number;
        };
        V1ServiceHealthResponse: {
            info?: components["schemas"]["AuthHealthResponse"] | components["schemas"]["RealtimeHealthResponse"];
            /** @enum {string} */
            name: "auth" | "db" | "pooler" | "realtime" | "rest" | "storage";
            healthy: boolean;
            /** @enum {string} */
            status: "COMING_UP" | "ACTIVE_HEALTHY" | "UNHEALTHY";
            error?: string;
        };
        PostgresConfigResponse: {
            statement_timeout?: string;
            effective_cache_size?: string;
            maintenance_work_mem?: string;
            max_connections?: number;
            max_locks_per_transaction?: number;
            max_parallel_maintenance_workers?: number;
            max_parallel_workers?: number;
            max_parallel_workers_per_gather?: number;
            max_standby_archive_delay?: string;
            max_standby_streaming_delay?: string;
            max_worker_processes?: number;
            shared_buffers?: string;
            work_mem?: string;
            /** @enum {string} */
            session_replication_role?: "origin" | "replica" | "local";
        };
        UpdatePostgresConfigBody: {
            statement_timeout?: string;
            effective_cache_size?: string;
            maintenance_work_mem?: string;
            max_connections?: number;
            max_locks_per_transaction?: number;
            max_parallel_maintenance_workers?: number;
            max_parallel_workers?: number;
            max_parallel_workers_per_gather?: number;
            max_standby_archive_delay?: string;
            max_standby_streaming_delay?: string;
            max_worker_processes?: number;
            shared_buffers?: string;
            work_mem?: string;
            /** @enum {string} */
            session_replication_role?: "origin" | "replica" | "local";
        };
        V1PgbouncerConfigResponse: {
            /** @enum {string} */
            pool_mode?: "transaction" | "session" | "statement";
            default_pool_size?: number;
            ignore_startup_parameters?: string;
            max_client_conn?: number;
            connection_string?: string;
        };
        SupavisorConfigResponse: {
            identifier: string;
            /** @enum {string} */
            database_type: "PRIMARY" | "READ_REPLICA";
            is_using_scram_auth: boolean;
            db_user: string;
            db_host: string;
            db_port: number;
            db_name: string;
            connectionString: string;
            default_pool_size: number | null;
            max_client_conn: number | null;
            /** @enum {string} */
            pool_mode: "transaction" | "session";
        };
        UpdateSupavisorConfigBody: {
            default_pool_size?: number | null;
            /**
             * @deprecated
             * @description This field is deprecated and is ignored in this request
             * @enum {string}
             */
            pool_mode?: "transaction" | "session";
        };
        UpdateSupavisorConfigResponse: {
            default_pool_size: number | null;
            /** @enum {string} */
            pool_mode: "transaction" | "session";
        };
        AuthConfigResponse: {
            api_max_request_duration: number | null;
            db_max_pool_size: number | null;
            disable_signup: boolean | null;
            external_anonymous_users_enabled: boolean | null;
            external_apple_additional_client_ids: string | null;
            external_apple_client_id: string | null;
            external_apple_enabled: boolean | null;
            external_apple_secret: string | null;
            external_azure_client_id: string | null;
            external_azure_enabled: boolean | null;
            external_azure_secret: string | null;
            external_azure_url: string | null;
            external_bitbucket_client_id: string | null;
            external_bitbucket_enabled: boolean | null;
            external_bitbucket_secret: string | null;
            external_discord_client_id: string | null;
            external_discord_enabled: boolean | null;
            external_discord_secret: string | null;
            external_email_enabled: boolean | null;
            external_facebook_client_id: string | null;
            external_facebook_enabled: boolean | null;
            external_facebook_secret: string | null;
            external_figma_client_id: string | null;
            external_figma_enabled: boolean | null;
            external_figma_secret: string | null;
            external_github_client_id: string | null;
            external_github_enabled: boolean | null;
            external_github_secret: string | null;
            external_gitlab_client_id: string | null;
            external_gitlab_enabled: boolean | null;
            external_gitlab_secret: string | null;
            external_gitlab_url: string | null;
            external_google_additional_client_ids: string | null;
            external_google_client_id: string | null;
            external_google_enabled: boolean | null;
            external_google_secret: string | null;
            external_google_skip_nonce_check: boolean | null;
            external_kakao_client_id: string | null;
            external_kakao_enabled: boolean | null;
            external_kakao_secret: string | null;
            external_keycloak_client_id: string | null;
            external_keycloak_enabled: boolean | null;
            external_keycloak_secret: string | null;
            external_keycloak_url: string | null;
            external_linkedin_oidc_client_id: string | null;
            external_linkedin_oidc_enabled: boolean | null;
            external_linkedin_oidc_secret: string | null;
            external_slack_oidc_client_id: string | null;
            external_slack_oidc_enabled: boolean | null;
            external_slack_oidc_secret: string | null;
            external_notion_client_id: string | null;
            external_notion_enabled: boolean | null;
            external_notion_secret: string | null;
            external_phone_enabled: boolean | null;
            external_slack_client_id: string | null;
            external_slack_enabled: boolean | null;
            external_slack_secret: string | null;
            external_spotify_client_id: string | null;
            external_spotify_enabled: boolean | null;
            external_spotify_secret: string | null;
            external_twitch_client_id: string | null;
            external_twitch_enabled: boolean | null;
            external_twitch_secret: string | null;
            external_twitter_client_id: string | null;
            external_twitter_enabled: boolean | null;
            external_twitter_secret: string | null;
            external_workos_client_id: string | null;
            external_workos_enabled: boolean | null;
            external_workos_secret: string | null;
            external_workos_url: string | null;
            external_zoom_client_id: string | null;
            external_zoom_enabled: boolean | null;
            external_zoom_secret: string | null;
            hook_custom_access_token_enabled: boolean | null;
            hook_custom_access_token_uri: string | null;
            hook_custom_access_token_secrets: string | null;
            hook_mfa_verification_attempt_enabled: boolean | null;
            hook_mfa_verification_attempt_uri: string | null;
            hook_mfa_verification_attempt_secrets: string | null;
            hook_password_verification_attempt_enabled: boolean | null;
            hook_password_verification_attempt_uri: string | null;
            hook_password_verification_attempt_secrets: string | null;
            hook_send_sms_enabled: boolean | null;
            hook_send_sms_uri: string | null;
            hook_send_sms_secrets: string | null;
            hook_send_email_enabled: boolean | null;
            hook_send_email_uri: string | null;
            hook_send_email_secrets: string | null;
            jwt_exp: number | null;
            mailer_allow_unverified_email_sign_ins: boolean | null;
            mailer_autoconfirm: boolean | null;
            mailer_otp_exp: number;
            mailer_otp_length: number | null;
            mailer_secure_email_change_enabled: boolean | null;
            mailer_subjects_confirmation: string | null;
            mailer_subjects_email_change: string | null;
            mailer_subjects_invite: string | null;
            mailer_subjects_magic_link: string | null;
            mailer_subjects_reauthentication: string | null;
            mailer_subjects_recovery: string | null;
            mailer_templates_confirmation_content: string | null;
            mailer_templates_email_change_content: string | null;
            mailer_templates_invite_content: string | null;
            mailer_templates_magic_link_content: string | null;
            mailer_templates_reauthentication_content: string | null;
            mailer_templates_recovery_content: string | null;
            mfa_max_enrolled_factors: number | null;
            password_hibp_enabled: boolean | null;
            password_min_length: number | null;
            password_required_characters: string | null;
            rate_limit_anonymous_users: number | null;
            rate_limit_email_sent: number | null;
            rate_limit_sms_sent: number | null;
            rate_limit_token_refresh: number | null;
            rate_limit_verify: number | null;
            rate_limit_otp: number | null;
            refresh_token_rotation_enabled: boolean | null;
            saml_enabled: boolean | null;
            security_captcha_enabled: boolean | null;
            security_captcha_provider: string | null;
            security_captcha_secret: string | null;
            security_manual_linking_enabled: boolean | null;
            security_refresh_token_reuse_interval: number | null;
            security_update_password_require_reauthentication: boolean | null;
            sessions_inactivity_timeout: number | null;
            sessions_single_per_user: boolean | null;
            sessions_tags: string | null;
            sessions_timebox: number | null;
            site_url: string | null;
            sms_autoconfirm: boolean | null;
            sms_max_frequency: number | null;
            sms_messagebird_access_key: string | null;
            sms_messagebird_originator: string | null;
            sms_otp_exp: number | null;
            sms_otp_length: number;
            sms_provider: string | null;
            sms_template: string | null;
            sms_test_otp: string | null;
            sms_test_otp_valid_until: string | null;
            sms_textlocal_api_key: string | null;
            sms_textlocal_sender: string | null;
            sms_twilio_account_sid: string | null;
            sms_twilio_auth_token: string | null;
            sms_twilio_content_sid: string | null;
            sms_twilio_message_service_sid: string | null;
            sms_twilio_verify_account_sid: string | null;
            sms_twilio_verify_auth_token: string | null;
            sms_twilio_verify_message_service_sid: string | null;
            sms_vonage_api_key: string | null;
            sms_vonage_api_secret: string | null;
            sms_vonage_from: string | null;
            smtp_admin_email: string | null;
            smtp_host: string | null;
            smtp_max_frequency: number | null;
            smtp_pass: string | null;
            smtp_port: string | null;
            smtp_sender_name: string | null;
            smtp_user: string | null;
            uri_allow_list: string | null;
        };
        UpdateAuthConfigBody: {
            site_url?: string;
            disable_signup?: boolean;
            jwt_exp?: number;
            smtp_admin_email?: string;
            smtp_host?: string;
            smtp_port?: string;
            smtp_user?: string;
            smtp_pass?: string;
            smtp_max_frequency?: number;
            smtp_sender_name?: string;
            mailer_allow_unverified_email_sign_ins?: boolean;
            mailer_autoconfirm?: boolean;
            mailer_subjects_invite?: string;
            mailer_subjects_confirmation?: string;
            mailer_subjects_recovery?: string;
            mailer_subjects_email_change?: string;
            mailer_subjects_magic_link?: string;
            mailer_subjects_reauthentication?: string;
            mailer_templates_invite_content?: string;
            mailer_templates_confirmation_content?: string;
            mailer_templates_recovery_content?: string;
            mailer_templates_email_change_content?: string;
            mailer_templates_magic_link_content?: string;
            mailer_templates_reauthentication_content?: string;
            mfa_max_enrolled_factors?: number;
            uri_allow_list?: string;
            external_anonymous_users_enabled?: boolean;
            external_email_enabled?: boolean;
            external_phone_enabled?: boolean;
            saml_enabled?: boolean;
            security_captcha_enabled?: boolean;
            security_captcha_provider?: string;
            security_captcha_secret?: string;
            sessions_timebox?: number;
            sessions_inactivity_timeout?: number;
            sessions_single_per_user?: boolean;
            sessions_tags?: string;
            rate_limit_anonymous_users?: number;
            rate_limit_email_sent?: number;
            rate_limit_sms_sent?: number;
            rate_limit_verify?: number;
            rate_limit_token_refresh?: number;
            rate_limit_otp?: number;
            mailer_secure_email_change_enabled?: boolean;
            refresh_token_rotation_enabled?: boolean;
            password_hibp_enabled?: boolean;
            password_min_length?: number;
            /** @enum {string} */
            password_required_characters?: "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ:0123456789" | "abcdefghijklmnopqrstuvwxyz:ABCDEFGHIJKLMNOPQRSTUVWXYZ:0123456789" | "abcdefghijklmnopqrstuvwxyz:ABCDEFGHIJKLMNOPQRSTUVWXYZ:0123456789:!@#$%^&*()_+-=[]{};'\\\\:\"|<>?,./`~" | "";
            security_manual_linking_enabled?: boolean;
            security_update_password_require_reauthentication?: boolean;
            security_refresh_token_reuse_interval?: number;
            mailer_otp_exp?: number;
            mailer_otp_length?: number;
            sms_autoconfirm?: boolean;
            sms_max_frequency?: number;
            sms_otp_exp?: number;
            sms_otp_length?: number;
            sms_provider?: string;
            sms_messagebird_access_key?: string;
            sms_messagebird_originator?: string;
            sms_test_otp?: string;
            sms_test_otp_valid_until?: string;
            sms_textlocal_api_key?: string;
            sms_textlocal_sender?: string;
            sms_twilio_account_sid?: string;
            sms_twilio_auth_token?: string;
            sms_twilio_content_sid?: string;
            sms_twilio_message_service_sid?: string;
            sms_twilio_verify_account_sid?: string;
            sms_twilio_verify_auth_token?: string;
            sms_twilio_verify_message_service_sid?: string;
            sms_vonage_api_key?: string;
            sms_vonage_api_secret?: string;
            sms_vonage_from?: string;
            sms_template?: string;
            hook_mfa_verification_attempt_enabled?: boolean;
            hook_mfa_verification_attempt_uri?: string;
            hook_mfa_verification_attempt_secrets?: string;
            hook_password_verification_attempt_enabled?: boolean;
            hook_password_verification_attempt_uri?: string;
            hook_password_verification_attempt_secrets?: string;
            hook_custom_access_token_enabled?: boolean;
            hook_custom_access_token_uri?: string;
            hook_custom_access_token_secrets?: string;
            hook_send_sms_enabled?: boolean;
            hook_send_sms_uri?: string;
            hook_send_sms_secrets?: string;
            hook_send_email_enabled?: boolean;
            hook_send_email_uri?: string;
            hook_send_email_secrets?: string;
            external_apple_enabled?: boolean;
            external_apple_client_id?: string;
            external_apple_secret?: string;
            external_apple_additional_client_ids?: string;
            external_azure_enabled?: boolean;
            external_azure_client_id?: string;
            external_azure_secret?: string;
            external_azure_url?: string;
            external_bitbucket_enabled?: boolean;
            external_bitbucket_client_id?: string;
            external_bitbucket_secret?: string;
            external_discord_enabled?: boolean;
            external_discord_client_id?: string;
            external_discord_secret?: string;
            external_facebook_enabled?: boolean;
            external_facebook_client_id?: string;
            external_facebook_secret?: string;
            external_figma_enabled?: boolean;
            external_figma_client_id?: string;
            external_figma_secret?: string;
            external_github_enabled?: boolean;
            external_github_client_id?: string;
            external_github_secret?: string;
            external_gitlab_enabled?: boolean;
            external_gitlab_client_id?: string;
            external_gitlab_secret?: string;
            external_gitlab_url?: string;
            external_google_enabled?: boolean;
            external_google_client_id?: string;
            external_google_secret?: string;
            external_google_additional_client_ids?: string;
            external_google_skip_nonce_check?: boolean;
            external_kakao_enabled?: boolean;
            external_kakao_client_id?: string;
            external_kakao_secret?: string;
            external_keycloak_enabled?: boolean;
            external_keycloak_client_id?: string;
            external_keycloak_secret?: string;
            external_keycloak_url?: string;
            external_linkedin_oidc_enabled?: boolean;
            external_linkedin_oidc_client_id?: string;
            external_linkedin_oidc_secret?: string;
            external_slack_oidc_enabled?: boolean;
            external_slack_oidc_client_id?: string;
            external_slack_oidc_secret?: string;
            external_notion_enabled?: boolean;
            external_notion_client_id?: string;
            external_notion_secret?: string;
            external_slack_enabled?: boolean;
            external_slack_client_id?: string;
            external_slack_secret?: string;
            external_spotify_enabled?: boolean;
            external_spotify_client_id?: string;
            external_spotify_secret?: string;
            external_twitch_enabled?: boolean;
            external_twitch_client_id?: string;
            external_twitch_secret?: string;
            external_twitter_enabled?: boolean;
            external_twitter_client_id?: string;
            external_twitter_secret?: string;
            external_workos_enabled?: boolean;
            external_workos_client_id?: string;
            external_workos_secret?: string;
            external_workos_url?: string;
            external_zoom_enabled?: boolean;
            external_zoom_client_id?: string;
            external_zoom_secret?: string;
            db_max_pool_size?: number;
            api_max_request_duration?: number;
        };
        V1RunQueryBody: {
            query: string;
        };
        V1CreateFunctionBody: {
            slug: string;
            name: string;
            body: string;
            verify_jwt?: boolean;
        };
        FunctionResponse: {
            id: string;
            slug: string;
            name: string;
            /** @enum {string} */
            status: "ACTIVE" | "REMOVED" | "THROTTLED";
            version: number;
            created_at: number;
            updated_at: number;
            verify_jwt?: boolean;
            import_map?: boolean;
            entrypoint_path?: string;
            import_map_path?: string;
        };
        FunctionSlugResponse: {
            id: string;
            slug: string;
            name: string;
            /** @enum {string} */
            status: "ACTIVE" | "REMOVED" | "THROTTLED";
            version: number;
            created_at: number;
            updated_at: number;
            verify_jwt?: boolean;
            import_map?: boolean;
            entrypoint_path?: string;
            import_map_path?: string;
        };
        V1UpdateFunctionBody: {
            name?: string;
            body?: string;
            verify_jwt?: boolean;
        };
        V1StorageBucketResponse: {
            id: string;
            name: string;
            owner: string;
            created_at: string;
            updated_at: string;
            public: boolean;
        };
        AttributeValue: {
            default?: Record<string, never> | number | string | boolean;
            name?: string;
            names?: string[];
            array?: boolean;
        };
        AttributeMapping: {
            keys: {
                [key: string]: components["schemas"]["AttributeValue"] | undefined;
            };
        };
        CreateProviderBody: {
            /**
             * @description What type of provider will be created
             * @enum {string}
             */
            type: "saml";
            metadata_xml?: string;
            metadata_url?: string;
            domains?: string[];
            attribute_mapping?: components["schemas"]["AttributeMapping"];
        };
        SamlDescriptor: {
            id: string;
            entity_id: string;
            metadata_url?: string;
            metadata_xml?: string;
            attribute_mapping?: components["schemas"]["AttributeMapping"];
        };
        Domain: {
            id: string;
            domain?: string;
            created_at?: string;
            updated_at?: string;
        };
        CreateProviderResponse: {
            id: string;
            saml?: components["schemas"]["SamlDescriptor"];
            domains?: components["schemas"]["Domain"][];
            created_at?: string;
            updated_at?: string;
        };
        Provider: {
            id: string;
            saml?: components["schemas"]["SamlDescriptor"];
            domains?: components["schemas"]["Domain"][];
            created_at?: string;
            updated_at?: string;
        };
        ListProvidersResponse: {
            items: components["schemas"]["Provider"][];
        };
        GetProviderResponse: {
            id: string;
            saml?: components["schemas"]["SamlDescriptor"];
            domains?: components["schemas"]["Domain"][];
            created_at?: string;
            updated_at?: string;
        };
        UpdateProviderBody: {
            metadata_xml?: string;
            metadata_url?: string;
            domains?: string[];
            attribute_mapping?: components["schemas"]["AttributeMapping"];
        };
        UpdateProviderResponse: {
            id: string;
            saml?: components["schemas"]["SamlDescriptor"];
            domains?: components["schemas"]["Domain"][];
            created_at?: string;
            updated_at?: string;
        };
        DeleteProviderResponse: {
            id: string;
            saml?: components["schemas"]["SamlDescriptor"];
            domains?: components["schemas"]["Domain"][];
            created_at?: string;
            updated_at?: string;
        };
        V1Backup: {
            /** @enum {string} */
            status: "COMPLETED" | "FAILED" | "PENDING" | "REMOVED" | "ARCHIVED";
            is_physical_backup: boolean;
            inserted_at: string;
        };
        V1PhysicalBackup: {
            earliest_physical_backup_date_unix?: number;
            latest_physical_backup_date_unix?: number;
        };
        V1BackupsResponse: {
            region: string;
            walg_enabled: boolean;
            pitr_enabled: boolean;
            backups: components["schemas"]["V1Backup"][];
            physical_backup_data: components["schemas"]["V1PhysicalBackup"];
        };
        V1RestorePitrBody: {
            recovery_time_target_unix: number;
        };
        V1OrganizationMemberResponse: {
            user_id: string;
            user_name: string;
            email?: string;
            role_name: string;
            mfa_enabled: boolean;
        };
        /** @enum {string} */
        BillingPlanId: "free" | "pro" | "team" | "enterprise";
        V1OrganizationSlugResponse: {
            plan?: components["schemas"]["BillingPlanId"];
            opt_in_tags: "AI_SQL_GENERATOR_OPT_IN"[];
            id: string;
            name: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "v1-get-a-branch-config": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Branch ID */
                branch_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BranchDetailResponse"];
                };
            };
            /** @description Failed to retrieve database branch */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-delete-a-branch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Branch ID */
                branch_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BranchDeleteResponse"];
                };
            };
            /** @description Failed to delete database branch */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-update-a-branch-config": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Branch ID */
                branch_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateBranchBody"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BranchResponse"];
                };
            };
            /** @description Failed to update database branch */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-reset-a-branch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Branch ID */
                branch_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BranchResetResponse"];
                };
            };
            /** @description Failed to reset database branch */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-list-all-projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["V1ProjectResponse"][];
                };
            };
        };
    };
    "v1-create-a-project": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["V1CreateProjectBody"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["V1ProjectResponse"];
                };
            };
        };
    };
    "v1-list-all-organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationResponseV1"][];
                };
            };
            /** @description Unexpected error listing organizations */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-create-an-organization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOrganizationBodyV1"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationResponseV1"];
                };
            };
            /** @description Unexpected error creating an organization */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-authorize-user": {
        parameters: {
            query: {
                client_id: string;
                response_type: "code" | "token" | "id_token token";
                redirect_uri: string;
                scope?: string;
                state?: string;
                response_mode?: string;
                code_challenge?: string;
                code_challenge_method?: "plain" | "sha256" | "S256";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            303: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-exchange-oauth-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["OAuthTokenBody"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuthTokenResponse"];
                };
            };
        };
    };
    "v1-list-all-snippets": {
        parameters: {
            query?: {
                project_ref?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SnippetList"];
                };
            };
            /** @description Failed to list user's SQL snippets */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-get-a-snippet": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SnippetResponse"];
                };
            };
            /** @description Failed to retrieve SQL snippet */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-get-project-api-keys": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiKeyResponse"][];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-list-all-branches": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BranchResponse"][];
                };
            };
            /** @description Failed to retrieve database branches */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-create-a-branch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateBranchBody"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BranchResponse"];
                };
            };
            /** @description Failed to create database branch */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-disable-preview-branching": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to disable preview branching */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-get-hostname-config": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateCustomHostnameResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to retrieve project's custom hostname config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-Delete hostname config": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to delete project custom hostname configuration */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-update-hostname-config": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCustomHostnameBody"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateCustomHostnameResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to update project custom hostname configuration */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-verify-dns-config": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateCustomHostnameResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to verify project custom hostname configuration */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-activate-custom-hostname": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateCustomHostnameResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to activate project custom hostname configuration */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-list-all-network-bans": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NetworkBanResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to retrieve project's network bans */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-delete-network-bans": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RemoveNetworkBanRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to remove network bans. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-get-network-restrictions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NetworkRestrictionsResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to retrieve project's network restrictions */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-update-network-restrictions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NetworkRestrictionsRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NetworkRestrictionsResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to update project network restrictions */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-get-pgsodium-config": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PgsodiumConfigResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to retrieve project's pgsodium config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-update-pgsodium-config": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePgsodiumConfigBody"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PgsodiumConfigResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to update project's pgsodium config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-get-postgrest-service-config": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostgrestConfigWithJWTSecretResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to retrieve project's postgrest config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-update-postgrest-service-config": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePostgrestConfigBody"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["V1PostgrestConfigResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to update project's postgrest config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-Delete a project": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["V1ProjectRefResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-list-all-secrets": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SecretResponse"][];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to retrieve project's secrets */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-bulk-create-secrets": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSecretBody"][];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to create project's secrets */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-bulk-delete-secrets": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string[];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to delete secrets with given names */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-get-ssl-enforcement-config": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SslEnforcementResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to retrieve project's SSL enforcement config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-update-ssl-enforcement-config": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SslEnforcementRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SslEnforcementResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to update project's SSL enforcement configuration. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-generate-typescript-types": {
        parameters: {
            query?: {
                included_schemas?: string;
            };
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TypescriptResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to generate TypeScript types */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-get-vanity-subdomain-config": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VanitySubdomainConfigResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to get project vanity subdomain configuration */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-deactivate-vanity-subdomain-config": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to delete project vanity subdomain configuration */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-check-vanity-subdomain-availability": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VanitySubdomainBody"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubdomainAvailabilityResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to check project vanity subdomain configuration */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-activate-vanity-subdomain-config": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VanitySubdomainBody"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActivateVanitySubdomainResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to activate project vanity subdomain configuration */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-upgrade-postgres-version": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpgradeDatabaseBody"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectUpgradeInitiateResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to initiate project upgrade */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-get-postgrest-upgrade-eligibility": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectUpgradeEligibilityResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to determine project upgrade eligibility */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-get-postgrest-upgrade-status": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseUpgradeStatusResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to retrieve project upgrade status */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-get-readonly-mode-status": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReadOnlyStatusResponse"];
                };
            };
            /** @description Failed to get project readonly mode status */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-disable-readonly-mode-temporarily": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to disable project's readonly mode */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-setup-a-read-replica": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetUpReadReplicaBody"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to set up read replica */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-remove-a-read-replica": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RemoveReadReplicaBody"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to remove read replica */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-get-services-health": {
        parameters: {
            query: {
                timeout_ms?: number;
                services: ("auth" | "db" | "pooler" | "realtime" | "rest" | "storage")[];
            };
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["V1ServiceHealthResponse"][];
                };
            };
            /** @description Failed to retrieve project's service health status */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-get-postgres-config": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostgresConfigResponse"];
                };
            };
            /** @description Failed to retrieve project's Postgres config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-update-postgres-config": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePostgresConfigBody"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostgresConfigResponse"];
                };
            };
            /** @description Failed to update project's Postgres config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-get-project-pgbouncer-config": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["V1PgbouncerConfigResponse"];
                };
            };
            /** @description Failed to retrieve project's pgbouncer config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-get-supavisor-config": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SupavisorConfigResponse"][];
                };
            };
            /** @description Failed to retrieve project's supavisor config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-update-supavisor-config": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateSupavisorConfigBody"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateSupavisorConfigResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to update project's supavisor config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-get-auth-service-config": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthConfigResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to retrieve project's auth config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-update-auth-service-config": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAuthConfigBody"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthConfigResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to update project's auth config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-run-a-query": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["V1RunQueryBody"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to run sql query */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-enable-database-webhook": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to enable Database Webhooks on the project */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-list-all-functions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FunctionResponse"][];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to retrieve project's functions */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createFunction: {
        parameters: {
            query?: {
                slug?: string;
                name?: string;
                verify_jwt?: boolean;
                import_map?: boolean;
                entrypoint_path?: string;
                import_map_path?: string;
            };
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["V1CreateFunctionBody"];
                "application/vnd.denoland.eszip": components["schemas"]["V1CreateFunctionBody"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FunctionResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to create project's function */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-get-a-function": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
                /** @description Function slug */
                function_slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FunctionSlugResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to retrieve function with given slug */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-delete-a-function": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
                /** @description Function slug */
                function_slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to delete function with given slug */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-update-a-function": {
        parameters: {
            query?: {
                slug?: string;
                name?: string;
                verify_jwt?: boolean;
                import_map?: boolean;
                entrypoint_path?: string;
                import_map_path?: string;
            };
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
                /** @description Function slug */
                function_slug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["V1UpdateFunctionBody"];
                "application/vnd.denoland.eszip": components["schemas"]["V1UpdateFunctionBody"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FunctionResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to update function with given slug */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-get-a-function-body": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
                /** @description Function slug */
                function_slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to retrieve function body with given slug */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-list-all-buckets": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["V1StorageBucketResponse"][];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to get list of buckets */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-list-all-sso-provider": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListProvidersResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description SAML 2.0 support is not enabled for this project */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-create-a-sso-provider": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateProviderBody"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateProviderResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description SAML 2.0 support is not enabled for this project */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-get-a-sso-provider": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
                provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetProviderResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Either SAML 2.0 was not enabled for this project, or the provider does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-update-a-sso-provider": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
                provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProviderBody"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateProviderResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Either SAML 2.0 was not enabled for this project, or the provider does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-delete-a-sso-provider": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
                provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteProviderResponse"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Either SAML 2.0 was not enabled for this project, or the provider does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-list-all-backups": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["V1BackupsResponse"];
                };
            };
            /** @description Failed to get backups */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-restore-pitr-backup": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ref */
                ref: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["V1RestorePitrBody"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "v1-list-organization-members": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["V1OrganizationMemberResponse"][];
                };
            };
        };
    };
    "v1-get-an-organization": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["V1OrganizationSlugResponse"];
                };
            };
        };
    };
}
